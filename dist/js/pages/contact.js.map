{
  "version": 3,
  "sources": [
    "../../../node_modules/browser-pack/_prelude.js",
    "../../../src/js/module/ActivateSubmit.js",
    "../../../src/js/pages/contact.js"
  ],
  "names": [
    "r",
    "e",
    "n",
    "t",
    "o",
    "i",
    "f",
    "c",
    "require",
    "u",
    "a",
    "Error",
    "code",
    "p",
    "exports",
    "call",
    "length",
    "1",
    "module",
    "BLUR_EVENT",
    "CHANGE_EVENT",
    "SUBMIT_CLASS",
    "CHECK_EMPTY_CLASS",
    "CHECK_SELECTED_CLASS",
    "CHECK_CHECKED_CLASS",
    "CHECK_MAIL_CLASS",
    "CHECK_PASSWORD_CLASS",
    "ERROR_CLASS",
    "MAIL_VALIDATE_FORMAT",
    "PASSWORD_VALIDATE_FORMAT",
    "ActivateSubmit",
    "_classCallCheck",
    "this",
    "activeSubmit",
    "_createClass",
    "key",
    "value",
    "document",
    "querySelectorAll",
    "Array",
    "prototype",
    "slice",
    "querySelector",
    "checkResult",
    "empty",
    "convertNode",
    "s",
    "forEach",
    "addEventListener",
    "checkEmpty",
    "classList",
    "add",
    "remove",
    "filter",
    "radio",
    "checkSelected",
    "checked",
    "checkbox",
    "hasCheck",
    "mail",
    "mailFirstInput",
    "mailSecondInput",
    "test",
    "mailConfirmValidate",
    "password",
    "passwordFirstInput",
    "passwordSecondInput",
    "passwordConfirmValidate",
    "isValueEmpty",
    "isSelected",
    "isChecked",
    "mailValidate",
    "passwordValidate",
    "disabled",
    "Object",
    "keys",
    "defineProperty",
    "get",
    "set",
    "default",
    "_ActivateSubmit",
    "_ActivateSubmit2",
    "_interopRequireDefault",
    "LOAD_EVENT",
    "window"
  ],
  "mappings": "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",
  "file": "contact.js",
  "sourcesContent": [
    "(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()",
    "// 定数 -> イベント\nconst BLUR_EVENT = 'blur'\nconst CHANGE_EVENT = 'change'\n\n// 定数 -> 対象のクラス\nconst SUBMIT_CLASS = '.js-formSubmit-target'\nconst CHECK_EMPTY_CLASS = '.js-valueEmptyCheck-target'\nconst CHECK_SELECTED_CLASS = '.js-isSelected-target'\nconst CHECK_CHECKED_CLASS = '.js-hasChecked-target'\nconst CHECK_MAIL_CLASS = '.js-mailValidation-target'\nconst CHECK_PASSWORD_CLASS = '.js-passwordValidation-target'\nconst ERROR_CLASS = 'is-error'\n\n// 定数 -> メールアドレス　バリデーションフォーマット {半角英数字}@{半角英数字}\nconst MAIL_VALIDATE_FORMAT = /^(?:(?:(?:(?:[a-zA-Z0-9_!#\\$\\%&'*+\\/=?\\^`{}~|\\-]+)(?:\\.(?:[a-zA-Z0-9_!#\\$\\%&'*+\\/=?\\^`{}~|\\-]+))*)|(?:\"(?:\\\\[^\\r\\n]|[^\\\\\"])*\")))\\@(?:(?:(?:(?:[a-zA-Z0-9_!#\\$\\%&'*+\\/=?\\^`{}~|\\-]+)(?:\\.(?:[a-zA-Z0-9_!#\\$\\%&'*+\\/=?\\^`{}~|\\-]+))*)|(?:\\[(?:\\\\\\S|[\\x21-\\x5a\\x5e-\\x7e])*\\])))$/\n\n// 定数 -> パスワード　バリデーションフォーマット {半角[アルファベット大文字][アルファベット小文字][数字][8文字以上]}\nconst PASSWORD_VALIDATE_FORMAT = /^(?=.*?[a-z])(?=.*?[A-Z])(?=.*?\\d)[a-zA-Z\\d]{8,}$/\n\n/**\n * @class ActivateSubmit\n * @desc submitボタンをアクティブにする判定\n */\nclass ActivateSubmit {\n  /**\n   * @constructor\n   */\n  constructor() {\n    this.activeSubmit()\n  }\n\n  /**\n   * @desc 対象のNodeListをArrayに変換して返却（IE対応）\n   * @param {String} className 対象のクラス名\n   */\n  convertNode(className) {\n    const targetNode = document.querySelectorAll(className)\n    return Array.prototype.slice.call(targetNode,0)\n  }\n\n  /**\n   * @desc 値が空の場合にis-errorのクラスを付与\n   */\n  isValueEmpty() {\n    if (document.querySelector(CHECK_EMPTY_CLASS) === null) this.checkResult.empty = true\n\n    if(document.querySelector(CHECK_EMPTY_CLASS) !== null) {\n      const targetArray = this.convertNode(CHECK_EMPTY_CLASS)\n      const checkList = new Array(targetArray.length)\n      targetArray.forEach((elem, i) => {\n        elem.addEventListener(BLUR_EVENT, () => {\n          this.checkEmpty(elem, checkList, i)\n        })\n      })\n    }\n  }\n\n  /**\n   * @desc 値が空の要素であるか判定する\n   * @param {Object} element 対象の要素\n   * @param {Array} list チェック状態を書き込む配列\n   * @param {Number} index 処理番号\n   */\n  checkEmpty(element, list, index) {\n    if (element.value === '') {\n      element.classList.add(ERROR_CLASS)\n      list[index] = false\n    }\n    if (element.value !== '') {\n      element.classList.remove(ERROR_CLASS)\n      list[index] = true\n    }\n    list.filter(x => x === true).length !== list.length\n      ? this.checkResult.empty = false\n      : this.checkResult.empty = true\n  }\n\n  /**\n   * @desc radioボタンが選択されていない場合にis-errorのクラスを付与\n   */\n  isSelected() {\n    if (document.querySelector(CHECK_SELECTED_CLASS) === null) this.checkResult.radio = true\n\n    if (document.querySelector(CHECK_SELECTED_CLASS) !== null) {\n      const targetArray = this.convertNode(CHECK_SELECTED_CLASS)\n      const checkList = new Array(targetArray.length)\n      targetArray.forEach((elem, i) => {\n        elem.addEventListener(CHANGE_EVENT, () => {\n          this.checkSelected(elem, checkList, i)\n        })\n      })\n    }\n  }\n\n  /**\n   * @desc ラジオボタンが選択されているか判定する\n   * @param {Object} element 対象の要素\n   * @param {Array} list チェック状態を書き込む配列\n   * @param {Number} index 処理番号\n   */\n  checkSelected(element, list, index) {\n    if (!element.checked) {\n      element.classList.add(ERROR_CLASS)\n      list[index] = false\n    }\n    if (element.checked) {\n      element.classList.remove(ERROR_CLASS)\n      list[index] = true\n    }\n    list.filter(x => x === true).length > 0\n      ? this.checkResult.radio = true\n      : this.checkResult.radio = false\n  }\n\n  /**\n   * @desc checkedの場合にis-errorのクラスを付与\n   */\n  isChecked() {\n    if (document.querySelector(CHECK_CHECKED_CLASS) === null) this.checkResult.checkbox = true\n\n    if (document.querySelector(CHECK_CHECKED_CLASS) !== null) {\n      const targetArray = this.convertNode(CHECK_CHECKED_CLASS)\n      const checkList = new Array(targetArray.length)\n      targetArray.forEach((elem, i) => {\n        elem.addEventListener(CHANGE_EVENT, () => {\n          this.hasCheck(elem, checkList, i)\n        })\n      })\n    }\n  }\n\n  /**\n   * @desc チェックが入っているか判定する\n   * @param {Object} element 対象の要素\n   * @param {Array} list チェック状態を書き込む配列\n   * @param {Number} index 処理番号\n   */\n  hasCheck(element, list, index) {\n    if (!element.checked) {\n      element.classList.add(ERROR_CLASS)\n      list[index] = false\n    }\n    if (element.checked) {\n      element.classList.remove(ERROR_CLASS)\n      list[index] = true\n    }\n    list.filter(x => x === true).length !== list.length\n      ? this.checkResult.checkbox = false\n      : this.checkResult.checkbox = true\n  }\n\n  /**\n   * @desc 1つ目のメールアドレスをフォーマットを参照して検証\n   */\n  mailValidate() {\n    if (document.querySelector(CHECK_MAIL_CLASS) === null) this.checkResult.mail = true\n\n    if (document.querySelector(CHECK_MAIL_CLASS) !== null) {\n      const targetArray = this.convertNode(CHECK_MAIL_CLASS)\n      this.mailFirstInput = targetArray[0]\n      this.mailSecondInput = targetArray[1]\n\n      this.mailFirstInput.addEventListener(BLUR_EVENT, () => {\n        if (!MAIL_VALIDATE_FORMAT.test(this.mailFirstInput.value)) this.mailFirstInput.classList.add(ERROR_CLASS)\n        if (MAIL_VALIDATE_FORMAT.test(this.mailFirstInput.value)) {\n          this.mailFirstInput.classList.remove(ERROR_CLASS)\n          this.mailConfirmValidate()\n        }\n        this.mailSecondInput.value !== this.mailFirstInput.value\n          ? this.mailSecondInput.classList.add(ERROR_CLASS)\n          : this.mailSecondInput.classList.remove(ERROR_CLASS)\n      })\n    }\n  }\n\n  /**\n   * @desc 2つ目のメールアドレスを1つ目同様に検証し、1つ目と一致するか検証\n   */\n  mailConfirmValidate() {\n    this.mailSecondInput.addEventListener(BLUR_EVENT, () => {\n      if (!MAIL_VALIDATE_FORMAT.test(this.mailSecondInput.value) || this.mailSecondInput.value !== this.mailFirstInput.value) {\n        this.mailSecondInput.classList.add(ERROR_CLASS)\n        this.checkResult.mail = false\n      }\n      if (MAIL_VALIDATE_FORMAT.test(this.mailSecondInput.value) && this.mailSecondInput.value === this.mailFirstInput.value) {\n        this.mailSecondInput.classList.remove(ERROR_CLASS)\n        this.checkResult.mail = true\n      }\n    })\n  }\n\n  /**\n   * @desc 1つ目のパスワードをフォーマットを参照して検証\n   */\n  passwordValidate() {\n    if (document.querySelector(CHECK_PASSWORD_CLASS) === null) this.checkResult.password = true\n\n    if (document.querySelector(CHECK_PASSWORD_CLASS) !== null) {\n      const targetArray = this.convertNode(CHECK_PASSWORD_CLASS)\n      this.passwordFirstInput = targetArray[0]\n      this.passwordSecondInput = targetArray[1]\n\n      this.passwordFirstInput.addEventListener(BLUR_EVENT, () => {\n        if (!PASSWORD_VALIDATE_FORMAT.test(this.passwordFirstInput.value)) this.passwordFirstInput.classList.add(ERROR_CLASS)\n        if (PASSWORD_VALIDATE_FORMAT.test(this.passwordFirstInput.value)) {\n          this.passwordFirstInput.classList.remove(ERROR_CLASS)\n          this.passwordConfirmValidate()\n        }\n        this.passwordSecondInput.value !== this.passwordFirstInput.value\n          ? this.passwordSecondInput.classList.add(ERROR_CLASS)\n          : this.passwordSecondInput.classList.remove(ERROR_CLASS)\n      })\n    }\n  }\n\n  /**\n   * @desc 2つ目のパスワードを1つ目同様に検証し、1つ目と一致するか検証\n   */\n  passwordConfirmValidate() {\n    this.passwordSecondInput.addEventListener(BLUR_EVENT, () => {\n      if (!PASSWORD_VALIDATE_FORMAT.test(this.passwordSecondInput.value) || this.passwordSecondInput.value !== this.passwordFirstInput.value) {\n        this.passwordSecondInput.classList.add(ERROR_CLASS)\n        this.checkResult.password = false\n      }\n      if (PASSWORD_VALIDATE_FORMAT.test(this.passwordSecondInput.value) && this.passwordSecondInput.value === this.passwordFirstInput.value) {\n        this.passwordSecondInput.classList.remove(ERROR_CLASS)\n        this.checkResult.password = true\n      }\n    })\n  }\n\n  /**\n   * @desc checkを通過したときにsubmitをactiveにする\n   */\n  activeSubmit() {\n    const targetSubmit = document.querySelector(SUBMIT_CLASS)\n\n    // アクティブ判定に必要なオブジェクトを作成（全てtrueだと活性化する）\n    this.checkResult = { 'empty': false, 'radio': false, 'checkbox': false, 'mail': false, 'password': false }\n\n    // それぞれのチェック処理を走らせる\n    this.isValueEmpty()\n    this.isSelected()\n    this.isChecked()\n    this.mailValidate()\n    this.passwordValidate()\n\n    if (this.checkResult.empty === true && this.checkResult.radio === true && this.checkResult.checkbox === true && this.checkResult.mail === true && this.checkResult.password === true) targetSubmit.disabled = false\n\n    const checkObject = this.checkResult\n    Object.keys(checkObject).forEach(key => {\n      let oldValue = checkObject[key]\n      Object.defineProperty(checkObject, key, {\n        get: () => oldValue,\n        set: (newValue) => {\n          oldValue = newValue\n          checkObject.empty === true && checkObject.radio === true && checkObject.checkbox === true && checkObject.mail === true && checkObject.password === true\n            ? targetSubmit.disabled = false\n            : targetSubmit.disabled = true\n        }\n      })\n    })\n  }\n}\n\nexport default ActivateSubmit\n",
    "import ActivateSubmit from '../module/ActivateSubmit'\n\n// 定数\nconst LOAD_EVENT = 'DOMContentLoaded'\n\nwindow.addEventListener(LOAD_EVENT, () => {\n  // submitボタンの活性化処理\n  new ActivateSubmit()\n})\n"
  ]
}