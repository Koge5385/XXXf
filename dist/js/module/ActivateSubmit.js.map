{
  "version": 3,
  "sources": [
    "../../../node_modules/browser-pack/_prelude.js",
    "../../../src/js/module/ActivateSubmit.js"
  ],
  "names": [
    "r",
    "e",
    "n",
    "t",
    "o",
    "i",
    "f",
    "c",
    "require",
    "u",
    "a",
    "Error",
    "code",
    "p",
    "exports",
    "call",
    "length",
    "1",
    "module",
    "BLUR_EVENT",
    "CHANGE_EVENT",
    "SUBMIT_CLASS",
    "CHECK_EMPTY_CLASS",
    "CHECK_SELECTED_CLASS",
    "CHECK_CHECKED_CLASS",
    "CHECK_ANYCHECKED_CLASS",
    "CHECK_MAIL_CLASS",
    "CHECK_PASSWORD_CLASS",
    "ERROR_CLASS",
    "MAIL_VALIDATE_FORMAT",
    "PASSWORD_VALIDATE_FORMAT",
    "ActivateSubmit",
    "_classCallCheck",
    "this",
    "activeSubmit",
    "_createClass",
    "key",
    "value",
    "document",
    "querySelectorAll",
    "Array",
    "prototype",
    "slice",
    "querySelector",
    "checkResult",
    "empty",
    "convertNode",
    "s",
    "forEach",
    "filter",
    "addEventListener",
    "checkEmpty",
    "classList",
    "add",
    "remove",
    "radio",
    "checkSelected",
    "checked",
    "checkbox",
    "hasCheck",
    "anyCheck",
    "hasAnyCheck",
    "mail",
    "mailFirstInput",
    "mailSecondInput",
    "test",
    "mailConfirmValidate",
    "password",
    "passwordFirstInput",
    "passwordSecondInput",
    "passwordConfirmValidate",
    "isValueEmpty",
    "isSelected",
    "isChecked",
    "anyChecked",
    "mailValidate",
    "passwordValidate",
    "disabled",
    "Object",
    "keys",
    "defineProperty",
    "get",
    "set",
    "default"
  ],
  "mappings": "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",
  "file": "ActivateSubmit.js",
  "sourcesContent": [
    "(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()",
    "// 定数 -> イベント\nconst BLUR_EVENT = 'blur'\nconst CHANGE_EVENT = 'change'\n\n// 定数 -> 対象のクラス\nconst SUBMIT_CLASS = '.js-activate-target'\nconst CHECK_EMPTY_CLASS = '.js-valueEmptyCheck-target'\nconst CHECK_SELECTED_CLASS = '.js-isSelected-target'\nconst CHECK_CHECKED_CLASS = '.js-hasChecked-target'\nconst CHECK_ANYCHECKED_CLASS = '.js-anyChecked-target'\nconst CHECK_MAIL_CLASS = '.js-mailValidation-target'\nconst CHECK_PASSWORD_CLASS = '.js-passwordValidation-target'\nconst ERROR_CLASS = 'is-error'\n\n// 定数 -> メールアドレス　バリデーションフォーマット {半角英数字}@{半角英数字}\nconst MAIL_VALIDATE_FORMAT = /^(?:(?:(?:(?:[a-zA-Z0-9_!#\\$\\%&'*+\\/=?\\^`{}~|\\-]+)(?:\\.(?:[a-zA-Z0-9_!#\\$\\%&'*+\\/=?\\^`{}~|\\-]+))*)|(?:\"(?:\\\\[^\\r\\n]|[^\\\\\"])*\")))\\@(?:(?:(?:(?:[a-zA-Z0-9_!#\\$\\%&'*+\\/=?\\^`{}~|\\-]+)(?:\\.(?:[a-zA-Z0-9_!#\\$\\%&'*+\\/=?\\^`{}~|\\-]+))*)|(?:\\[(?:\\\\\\S|[\\x21-\\x5a\\x5e-\\x7e])*\\])))$/\n\n// 定数 -> パスワード　バリデーションフォーマット {半角[アルファベット大文字][アルファベット小文字][数字][8文字以上]}\nconst PASSWORD_VALIDATE_FORMAT = /^(?=.*?[a-z])(?=.*?[A-Z])(?=.*?\\d)[a-zA-Z\\d]{8,}$/\n\n/**\n * @class ActivateSubmit\n * @desc submitボタンをアクティブにする判定\n */\nclass ActivateSubmit {\n  /**\n   * @constructor\n   */\n  constructor() {\n    this.activeSubmit()\n  }\n\n  /**\n   * @desc 対象のNodeListをArrayに変換して返却（IE対応）\n   * @param {String} className 対象のクラス名\n   */\n  convertNode(className) {\n    const targetNode = document.querySelectorAll(className)\n    return Array.prototype.slice.call(targetNode,0)\n  }\n\n  /**\n   * @desc 値が空の場合にis-errorのクラスを付与\n   */\n  isValueEmpty() {\n    if (document.querySelector(CHECK_EMPTY_CLASS) === null) this.checkResult.empty = true\n\n    if(document.querySelector(CHECK_EMPTY_CLASS) !== null) {\n      const targetArray = this.convertNode(CHECK_EMPTY_CLASS)\n      const checkList = new Array(targetArray.length)\n      targetArray.forEach((elem, i) => {\n        if (elem.value !== '') checkList[i] = true\n        checkList.filter(x => x === true).length !== checkList.length\n          ? this.checkResult.empty = false\n          : this.checkResult.empty = true\n        elem.addEventListener(BLUR_EVENT, () => {\n          this.checkEmpty(elem, checkList, i)\n        })\n      })\n    }\n  }\n\n  /**\n   * @desc 値が空の要素であるか判定する\n   * @param {Object} element 対象の要素\n   * @param {Array} list チェック状態を書き込む配列\n   * @param {Number} index 処理番号\n   */\n  checkEmpty(element, list, index) {\n    if (element.value === '') {\n      element.classList.add(ERROR_CLASS)\n      list[index] = false\n    }\n    if (element.value !== '') {\n      element.classList.remove(ERROR_CLASS)\n      list[index] = true\n    }\n    list.filter(x => x === true).length !== list.length\n      ? this.checkResult.empty = false\n      : this.checkResult.empty = true\n  }\n\n  /**\n   * @desc radioボタンが選択されていない場合にis-errorのクラスを付与\n   */\n  isSelected() {\n    if (document.querySelector(CHECK_SELECTED_CLASS) === null) this.checkResult.radio = true\n\n    if (document.querySelector(CHECK_SELECTED_CLASS) !== null) {\n      const targetArray = this.convertNode(CHECK_SELECTED_CLASS)\n      const checkList = new Array(targetArray.length)\n      targetArray.forEach((elem, i) => {\n        elem.addEventListener(CHANGE_EVENT, () => {\n          this.checkSelected(elem, checkList, i)\n        })\n      })\n    }\n  }\n\n  /**\n   * @desc ラジオボタンが選択されているか判定する\n   * @param {Object} element 対象の要素\n   * @param {Array} list チェック状態を書き込む配列\n   * @param {Number} index 処理番号\n   */\n  checkSelected(element, list, index) {\n    if (!element.checked) {\n      element.classList.add(ERROR_CLASS)\n      list[index] = false\n    }\n    if (element.checked) {\n      element.classList.remove(ERROR_CLASS)\n      list[index] = true\n    }\n    list.filter(x => x === true).length > 0\n      ? this.checkResult.radio = true\n      : this.checkResult.radio = false\n  }\n\n  /**\n   * @desc checkedの場合にis-errorのクラスを付与\n   */\n  isChecked() {\n    if (document.querySelector(CHECK_CHECKED_CLASS) === null) this.checkResult.checkbox = true\n\n    if (document.querySelector(CHECK_CHECKED_CLASS) !== null) {\n      const targetArray = this.convertNode(CHECK_CHECKED_CLASS)\n      const checkList = new Array(targetArray.length)\n      targetArray.forEach((elem, i) => {\n        elem.addEventListener(CHANGE_EVENT, () => {\n          this.hasCheck(elem, checkList, i)\n        })\n      })\n    }\n  }\n\n  /**\n   * @desc チェックが入っているか判定する\n   * @param {Object} element 対象の要素\n   * @param {Array} list チェック状態を書き込む配列\n   * @param {Number} index 処理番号\n   */\n  hasCheck(element, list, index) {\n    if (!element.checked) {\n      element.classList.add(ERROR_CLASS)\n      list[index] = false\n    }\n    if (element.checked) {\n      element.classList.remove(ERROR_CLASS)\n      list[index] = true\n    }\n    list.filter(x => x === true).length !== list.length\n      ? this.checkResult.checkbox = false\n      : this.checkResult.checkbox = true\n  }\n\n  /**\n   * @desc 子要素の何れもcheckedでない場合にis-errorのクラスを付与\n   */\n  anyChecked() {\n    if (document.querySelector(CHECK_ANYCHECKED_CLASS) === null) this.checkResult.anyCheck = true\n\n    if (document.querySelector(CHECK_ANYCHECKED_CLASS) !== null) {\n      const targetArray = this.convertNode(CHECK_ANYCHECKED_CLASS)\n      const checkList = new Array(targetArray.length)\n      targetArray.forEach((elem, i) => {\n        const checkboxArray = elem.querySelectorAll('input')\n        const checkChildList = new Array(checkboxArray.length)\n        Array.prototype.slice.call(checkboxArray, 0).forEach((input, n) => {\n          if (input.checked) checkChildList[n] = true\n          if (checkChildList.filter(x => x === true).length > 0) checkList[i] = true\n          checkList.filter(x => x === true).length !== checkList.length\n            ? this.checkResult.anyCheck = false\n            : this.checkResult.anyCheck = true\n          input.addEventListener(CHANGE_EVENT, () => {\n            this.hasAnyCheck(input, checkList, checkChildList, i, n)\n          })\n        })\n      })\n    }\n  }\n\n  /**\n   * @desc チェックが入っているか判定する\n   * @param {Object} element 対象の要素\n   * @param {Array} list チェック状態を書き込む配列\n   * @param {Number} index 処理番号\n   */\n  hasAnyCheck(element, parentList, childList, index, subindex) {\n    if (!element.checked) {\n      element.classList.add(ERROR_CLASS)\n      childList[subindex] = false\n    }\n    if (element.checked) {\n      element.classList.remove(ERROR_CLASS)\n      childList[subindex] = true\n    }\n    if (childList.filter(x => x === true).length === 0) parentList[index] = false\n    if (childList.filter(x => x === true).length > 0) parentList[index] = true\n    parentList.filter(x => x === true).length !== parentList.length\n      ? this.checkResult.anyCheck = false\n      : this.checkResult.anyCheck = true\n  }\n\n  /**\n   * @desc 1つ目のメールアドレスをフォーマットを参照して検証\n   */\n  mailValidate() {\n    if (document.querySelector(CHECK_MAIL_CLASS) === null) this.checkResult.mail = true\n\n    if (document.querySelector(CHECK_MAIL_CLASS) !== null) {\n      const targetArray = this.convertNode(CHECK_MAIL_CLASS)\n      this.mailFirstInput = targetArray[0]\n      this.mailSecondInput = targetArray[1]\n\n      if (this.mailSecondInput !== undefined) {\n        this.mailFirstInput.addEventListener(BLUR_EVENT, () => {\n          if (!MAIL_VALIDATE_FORMAT.test(this.mailFirstInput.value)) this.mailFirstInput.classList.add(ERROR_CLASS)\n          if (MAIL_VALIDATE_FORMAT.test(this.mailFirstInput.value)) {\n            this.mailFirstInput.classList.remove(ERROR_CLASS)\n            this.mailConfirmValidate()\n          }\n          this.mailSecondInput.value !== this.mailFirstInput.value\n            ? this.mailSecondInput.classList.add(ERROR_CLASS)\n            : this.mailSecondInput.classList.remove(ERROR_CLASS)\n        })\n      }\n\n      if (this.mailSecondInput === undefined) {\n        this.mailFirstInput.addEventListener(BLUR_EVENT, () => {\n          if (!MAIL_VALIDATE_FORMAT.test(this.mailFirstInput.value)) {\n            this.mailFirstInput.classList.add(ERROR_CLASS)\n            this.checkResult.mail = false\n          }\n          if (MAIL_VALIDATE_FORMAT.test(this.mailFirstInput.value)) {\n            this.mailFirstInput.classList.remove(ERROR_CLASS)\n            this.checkResult.mail = true\n          }\n        })\n      }\n\n      // 初期値がある場合の処理\n      if (MAIL_VALIDATE_FORMAT.test(this.mailFirstInput.value)) this.checkResult.mail = true\n    }\n  }\n\n  /**\n   * @desc 2つ目のメールアドレスを1つ目同様に検証し、1つ目と一致するか検証\n   */\n  mailConfirmValidate() {\n    this.mailSecondInput.addEventListener(BLUR_EVENT, () => {\n      if (!MAIL_VALIDATE_FORMAT.test(this.mailSecondInput.value) || this.mailSecondInput.value !== this.mailFirstInput.value) {\n        this.mailSecondInput.classList.add(ERROR_CLASS)\n        this.checkResult.mail = false\n      }\n      if (MAIL_VALIDATE_FORMAT.test(this.mailSecondInput.value) && this.mailSecondInput.value === this.mailFirstInput.value) {\n        this.mailSecondInput.classList.remove(ERROR_CLASS)\n        this.checkResult.mail = true\n      }\n    })\n  }\n\n  /**\n   * @desc 1つ目のパスワードをフォーマットを参照して検証\n   */\n  passwordValidate() {\n    if (document.querySelector(CHECK_PASSWORD_CLASS) === null) this.checkResult.password = true\n\n    if (document.querySelector(CHECK_PASSWORD_CLASS) !== null) {\n      const targetArray = this.convertNode(CHECK_PASSWORD_CLASS)\n      this.passwordFirstInput = targetArray[0]\n      this.passwordSecondInput = targetArray[1]\n\n      if (this.passwordSecondInput !== undefined) {\n        this.passwordFirstInput.addEventListener(BLUR_EVENT, () => {\n          if (!PASSWORD_VALIDATE_FORMAT.test(this.passwordFirstInput.value)) this.passwordFirstInput.classList.add(ERROR_CLASS)\n          if (PASSWORD_VALIDATE_FORMAT.test(this.passwordFirstInput.value)) {\n            this.passwordFirstInput.classList.remove(ERROR_CLASS)\n            this.passwordConfirmValidate()\n          }\n          this.passwordSecondInput.value !== this.passwordFirstInput.value\n            ? this.passwordSecondInput.classList.add(ERROR_CLASS)\n            : this.passwordSecondInput.classList.remove(ERROR_CLASS)\n        })\n      }\n\n      if (this.passwordSecondInput === undefined) {\n        this.passwordFirstInput.addEventListener(BLUR_EVENT, () => {\n          if (!PASSWORD_VALIDATE_FORMAT.test(this.passwordFirstInput.value)) {\n            this.passwordFirstInput.classList.add(ERROR_CLASS)\n            this.checkResult.password = false\n          }\n          if (PASSWORD_VALIDATE_FORMAT.test(this.passwordFirstInput.value)) {\n            this.passwordFirstInput.classList.remove(ERROR_CLASS)\n            this.checkResult.password = true\n          }\n        })\n      }\n    }\n  }\n\n  /**\n   * @desc 2つ目のパスワードを1つ目同様に検証し、1つ目と一致するか検証\n   */\n  passwordConfirmValidate() {\n    this.passwordSecondInput.addEventListener(BLUR_EVENT, () => {\n      if (!PASSWORD_VALIDATE_FORMAT.test(this.passwordSecondInput.value) || this.passwordSecondInput.value !== this.passwordFirstInput.value) {\n        this.passwordSecondInput.classList.add(ERROR_CLASS)\n        this.checkResult.password = false\n      }\n      if (PASSWORD_VALIDATE_FORMAT.test(this.passwordSecondInput.value) && this.passwordSecondInput.value === this.passwordFirstInput.value) {\n        this.passwordSecondInput.classList.remove(ERROR_CLASS)\n        this.checkResult.password = true\n      }\n    })\n  }\n\n  /**\n   * @desc checkを通過したときにsubmitをactiveにする\n   */\n  activeSubmit() {\n    const targetSubmit = document.querySelector(SUBMIT_CLASS)\n\n    // アクティブ判定に必要なオブジェクトを作成（全てtrueだと活性化する）\n    this.checkResult = { 'empty': false, 'radio': false, 'checkbox': false, 'mail': false, 'password': false, 'anyCheck': false }\n\n    // それぞれのチェック処理を走らせる\n    this.isValueEmpty()\n    this.isSelected()\n    this.isChecked()\n    this.anyChecked()\n    this.mailValidate()\n    this.passwordValidate()\n\n    if (this.checkResult.empty === true && this.checkResult.radio === true && this.checkResult.checkbox === true && this.checkResult.mail === true && this.checkResult.password === true && this.checkResult.anyCheck === true) targetSubmit.disabled = false\n\n    const checkObject = this.checkResult\n    Object.keys(checkObject).forEach(key => {\n      let oldValue = checkObject[key]\n      Object.defineProperty(checkObject, key, {\n        get: () => oldValue,\n        set: (newValue) => {\n          oldValue = newValue\n          checkObject.empty === true && checkObject.radio === true && checkObject.checkbox === true && checkObject.mail === true && checkObject.password === true && checkObject.anyCheck === true\n            ? targetSubmit.disabled = false\n            : targetSubmit.disabled = true\n        }\n      })\n    })\n  }\n}\n\nexport default ActivateSubmit\n"
  ]
}