{
  "version": 3,
  "sources": [
    "../../../node_modules/browser-pack/_prelude.js",
    "../../../src/js/module/ActivateSubmit.js"
  ],
  "names": [
    "r",
    "e",
    "n",
    "t",
    "o",
    "i",
    "f",
    "c",
    "require",
    "u",
    "a",
    "Error",
    "code",
    "p",
    "exports",
    "call",
    "length",
    "1",
    "module",
    "BLUR_EVENT",
    "CHANGE_EVENT",
    "SUBMIT_CLASS",
    "CHECK_EMPTY_CLASS",
    "CHECK_SELECTED_CLASS",
    "CHECK_CHECKED_CLASS",
    "CHECK_ANYCHECKED_CLASS",
    "CHECK_MAIL_CLASS",
    "CHECK_PASSWORD_CLASS",
    "CHECK_TEL_CLASS",
    "ERROR_CLASS",
    "MAIL_VALIDATE_FORMAT",
    "PASSWORD_VALIDATE_FORMAT",
    "TEL_VALIDATE_FORMAT",
    "ActivateSubmit",
    "_classCallCheck",
    "this",
    "activeSubmit",
    "_createClass",
    "key",
    "value",
    "document",
    "querySelectorAll",
    "Array",
    "prototype",
    "slice",
    "querySelector",
    "checkResult",
    "empty",
    "convertNode",
    "s",
    "forEach",
    "filter",
    "addEventListener",
    "checkEmpty",
    "classList",
    "add",
    "remove",
    "radio",
    "checkSelected",
    "checked",
    "checkbox",
    "hasCheck",
    "anyCheck",
    "hasAnyCheck",
    "mail",
    "mailFirstInput",
    "mailSecondInput",
    "test",
    "mailConfirmValidate",
    "password",
    "passwordFirstInput",
    "passwordSecondInput",
    "passwordConfirmValidate",
    "tel",
    "telFirstInput",
    "telSecondInput",
    "telConfirmValidate",
    "isValueEmpty",
    "isSelected",
    "isChecked",
    "anyChecked",
    "mailValidate",
    "passwordValidate",
    "telValidate",
    "disabled",
    "Object",
    "keys",
    "defineProperty",
    "get",
    "set",
    "default"
  ],
  "mappings": "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",
  "file": "ActivateSubmit.js",
  "sourcesContent": [
    "(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()",
    "// 定数 -> イベント\nconst BLUR_EVENT = 'blur'\nconst CHANGE_EVENT = 'change'\n\n// 定数 -> 対象のクラス\nconst SUBMIT_CLASS = '.js-activate-target'\nconst CHECK_EMPTY_CLASS = '.js-valueEmptyCheck-target'\nconst CHECK_SELECTED_CLASS = '.js-isSelected-target'\nconst CHECK_CHECKED_CLASS = '.js-hasChecked-target'\nconst CHECK_ANYCHECKED_CLASS = '.js-anyChecked-target'\nconst CHECK_MAIL_CLASS = '.js-mailValidation-target'\nconst CHECK_PASSWORD_CLASS = '.js-passwordValidation-target'\nconst CHECK_TEL_CLASS = '.js-telValidation-target'\nconst ERROR_CLASS = 'is-error'\n\n// 定数 -> メールアドレス　バリデーションフォーマット {半角英数字}@{半角英数字}\nconst MAIL_VALIDATE_FORMAT = /^(?:(?:(?:(?:[a-zA-Z0-9_!#\\$\\%&'*+\\/=?\\^`{}~|\\-]+)(?:\\.(?:[a-zA-Z0-9_!#\\$\\%&'*+\\/=?\\^`{}~|\\-]+))*)|(?:\"(?:\\\\[^\\r\\n]|[^\\\\\"])*\")))\\@(?:(?:(?:(?:[a-zA-Z0-9_!#\\$\\%&'*+\\/=?\\^`{}~|\\-]+)(?:\\.(?:[a-zA-Z0-9_!#\\$\\%&'*+\\/=?\\^`{}~|\\-]+))*)|(?:\\[(?:\\\\\\S|[\\x21-\\x5a\\x5e-\\x7e])*\\])))$/\n\n// 定数 -> パスワード　バリデーションフォーマット {半角[アルファベット大文字][アルファベット小文字][数字][8文字以上]}\nconst PASSWORD_VALIDATE_FORMAT = /^(?=.*?[a-z])(?=.*?[A-Z])(?=.*?\\d)[a-zA-Z\\d]{8,}$/\n\n// 定数 -> 電話番号　バリデーションフォーマット {半角[数字][7桁]}\nconst TEL_VALIDATE_FORMAT = /^[0-9]+$/\n\n/**\n * @class ActivateSubmit\n * @desc submitボタンをアクティブにする判定\n */\nclass ActivateSubmit {\n  /**\n   * @constructor\n   */\n  constructor() {\n    this.activeSubmit()\n  }\n\n  /**\n   * @desc 対象のNodeListをArrayに変換して返却（IE対応）\n   * @param {String} className 対象のクラス名\n   */\n  convertNode(className) {\n    const targetNode = document.querySelectorAll(className)\n    return Array.prototype.slice.call(targetNode,0)\n  }\n\n  /**\n   * @desc 値が空の場合にis-errorのクラスを付与\n   */\n  isValueEmpty() {\n    if (document.querySelector(CHECK_EMPTY_CLASS) === null) this.checkResult.empty = true\n\n    if(document.querySelector(CHECK_EMPTY_CLASS) !== null) {\n      const targetArray = this.convertNode(CHECK_EMPTY_CLASS)\n      const checkList = new Array(targetArray.length)\n      targetArray.forEach((elem, i) => {\n        if (elem.value !== '') checkList[i] = true\n        checkList.filter(x => x === true).length !== checkList.length\n          ? this.checkResult.empty = false\n          : this.checkResult.empty = true\n        elem.addEventListener(BLUR_EVENT, () => {\n          this.checkEmpty(elem, checkList, i)\n        })\n      })\n    }\n  }\n\n  /**\n   * @desc 値が空の要素であるか判定する\n   * @param {Object} element 対象の要素\n   * @param {Array} list チェック状態を書き込む配列\n   * @param {Number} index 処理番号\n   */\n  checkEmpty(element, list, index) {\n    if (element.value === '') {\n      element.classList.add(ERROR_CLASS)\n      list[index] = false\n    }\n    if (element.value !== '') {\n      element.classList.remove(ERROR_CLASS)\n      list[index] = true\n    }\n    list.filter(x => x === true).length !== list.length\n      ? this.checkResult.empty = false\n      : this.checkResult.empty = true\n  }\n\n  /**\n   * @desc radioボタンが選択されていない場合にis-errorのクラスを付与\n   */\n  isSelected() {\n    if (document.querySelector(CHECK_SELECTED_CLASS) === null) this.checkResult.radio = true\n\n    if (document.querySelector(CHECK_SELECTED_CLASS) !== null) {\n      const targetArray = this.convertNode(CHECK_SELECTED_CLASS)\n      const checkList = new Array(targetArray.length)\n      targetArray.forEach((elem, i) => {\n        elem.addEventListener(CHANGE_EVENT, () => {\n          this.checkSelected(elem, checkList, i)\n        })\n      })\n    }\n  }\n\n  /**\n   * @desc ラジオボタンが選択されているか判定する\n   * @param {Object} element 対象の要素\n   * @param {Array} list チェック状態を書き込む配列\n   * @param {Number} index 処理番号\n   */\n  checkSelected(element, list, index) {\n    if (!element.checked) {\n      element.classList.add(ERROR_CLASS)\n      list[index] = false\n    }\n    if (element.checked) {\n      element.classList.remove(ERROR_CLASS)\n      list[index] = true\n    }\n    list.filter(x => x === true).length > 0\n      ? this.checkResult.radio = true\n      : this.checkResult.radio = false\n  }\n\n  /**\n   * @desc checkedの場合にis-errorのクラスを付与\n   */\n  isChecked() {\n    if (document.querySelector(CHECK_CHECKED_CLASS) === null) this.checkResult.checkbox = true\n\n    if (document.querySelector(CHECK_CHECKED_CLASS) !== null) {\n      const targetArray = this.convertNode(CHECK_CHECKED_CLASS)\n      const checkList = new Array(targetArray.length)\n      targetArray.forEach((elem, i) => {\n        elem.addEventListener(CHANGE_EVENT, () => {\n          this.hasCheck(elem, checkList, i)\n        })\n      })\n    }\n  }\n\n  /**\n   * @desc チェックが入っているか判定する\n   * @param {Object} element 対象の要素\n   * @param {Array} list チェック状態を書き込む配列\n   * @param {Number} index 処理番号\n   */\n  hasCheck(element, list, index) {\n    if (!element.checked) {\n      element.classList.add(ERROR_CLASS)\n      list[index] = false\n    }\n    if (element.checked) {\n      element.classList.remove(ERROR_CLASS)\n      list[index] = true\n    }\n    list.filter(x => x === true).length !== list.length\n      ? this.checkResult.checkbox = false\n      : this.checkResult.checkbox = true\n  }\n\n  /**\n   * @desc 子要素の何れもcheckedでない場合にis-errorのクラスを付与\n   */\n  anyChecked() {\n    if (document.querySelector(CHECK_ANYCHECKED_CLASS) === null) this.checkResult.anyCheck = true\n\n    if (document.querySelector(CHECK_ANYCHECKED_CLASS) !== null) {\n      const targetArray = this.convertNode(CHECK_ANYCHECKED_CLASS)\n      const checkList = new Array(targetArray.length)\n      targetArray.forEach((elem, i) => {\n        const checkboxArray = elem.querySelectorAll('input')\n        const checkChildList = new Array(checkboxArray.length)\n        Array.prototype.slice.call(checkboxArray, 0).forEach((input, n) => {\n          if (input.checked) checkChildList[n] = true\n          if (checkChildList.filter(x => x === true).length > 0) checkList[i] = true\n          checkList.filter(x => x === true).length !== checkList.length\n            ? this.checkResult.anyCheck = false\n            : this.checkResult.anyCheck = true\n          input.addEventListener(CHANGE_EVENT, () => {\n            this.hasAnyCheck(input, checkList, checkChildList, i, n)\n          })\n        })\n      })\n    }\n  }\n\n  /**\n   * @desc チェックが入っているか判定する\n   * @param {Object} element 対象の要素\n   * @param {Array} list チェック状態を書き込む配列\n   * @param {Number} index 処理番号\n   */\n  hasAnyCheck(element, parentList, childList, index, subindex) {\n    if (!element.checked) {\n      element.classList.add(ERROR_CLASS)\n      childList[subindex] = false\n    }\n    if (element.checked) {\n      element.classList.remove(ERROR_CLASS)\n      childList[subindex] = true\n    }\n    if (childList.filter(x => x === true).length === 0) parentList[index] = false\n    if (childList.filter(x => x === true).length > 0) parentList[index] = true\n    parentList.filter(x => x === true).length !== parentList.length\n      ? this.checkResult.anyCheck = false\n      : this.checkResult.anyCheck = true\n  }\n\n  /**\n   * @desc 1つ目のメールアドレスをフォーマットを参照して検証\n   */\n  mailValidate() {\n    if (document.querySelector(CHECK_MAIL_CLASS) === null) this.checkResult.mail = true\n\n    if (document.querySelector(CHECK_MAIL_CLASS) !== null) {\n      const targetArray = this.convertNode(CHECK_MAIL_CLASS)\n      this.mailFirstInput = targetArray[0]\n      this.mailSecondInput = targetArray[1]\n\n      if (this.mailSecondInput !== undefined) {\n        this.mailFirstInput.addEventListener(BLUR_EVENT, () => {\n          if (!MAIL_VALIDATE_FORMAT.test(this.mailFirstInput.value)) this.mailFirstInput.classList.add(ERROR_CLASS)\n          if (MAIL_VALIDATE_FORMAT.test(this.mailFirstInput.value)) {\n            this.mailFirstInput.classList.remove(ERROR_CLASS)\n            this.mailConfirmValidate()\n          }\n          this.mailSecondInput.value !== this.mailFirstInput.value\n            ? this.mailSecondInput.classList.add(ERROR_CLASS)\n            : this.mailSecondInput.classList.remove(ERROR_CLASS)\n        })\n      }\n\n      if (this.mailSecondInput === undefined) {\n        this.mailFirstInput.addEventListener(BLUR_EVENT, () => {\n          if (!MAIL_VALIDATE_FORMAT.test(this.mailFirstInput.value)) {\n            this.mailFirstInput.classList.add(ERROR_CLASS)\n            this.checkResult.mail = false\n          }\n          if (MAIL_VALIDATE_FORMAT.test(this.mailFirstInput.value)) {\n            this.mailFirstInput.classList.remove(ERROR_CLASS)\n            this.checkResult.mail = true\n          }\n        })\n      }\n\n      // 初期値がある場合の処理\n      if (MAIL_VALIDATE_FORMAT.test(this.mailFirstInput.value)) this.checkResult.mail = true\n    }\n  }\n\n  /**\n   * @desc 2つ目のメールアドレスを1つ目同様に検証し、1つ目と一致するか検証\n   */\n  mailConfirmValidate() {\n    this.mailSecondInput.addEventListener(BLUR_EVENT, () => {\n      if (!MAIL_VALIDATE_FORMAT.test(this.mailSecondInput.value) || this.mailSecondInput.value !== this.mailFirstInput.value) {\n        this.mailSecondInput.classList.add(ERROR_CLASS)\n        this.checkResult.mail = false\n      }\n      if (MAIL_VALIDATE_FORMAT.test(this.mailSecondInput.value) && this.mailSecondInput.value === this.mailFirstInput.value) {\n        this.mailSecondInput.classList.remove(ERROR_CLASS)\n        this.checkResult.mail = true\n      }\n    })\n  }\n\n  /**\n   * @desc 1つ目のパスワードをフォーマットを参照して検証\n   */\n  passwordValidate() {\n    if (document.querySelector(CHECK_PASSWORD_CLASS) === null) this.checkResult.password = true\n\n    if (document.querySelector(CHECK_PASSWORD_CLASS) !== null) {\n      const targetArray = this.convertNode(CHECK_PASSWORD_CLASS)\n      this.passwordFirstInput = targetArray[0]\n      this.passwordSecondInput = targetArray[1]\n\n      if (this.passwordSecondInput !== undefined) {\n        this.passwordFirstInput.addEventListener(BLUR_EVENT, () => {\n          if (!PASSWORD_VALIDATE_FORMAT.test(this.passwordFirstInput.value)) this.passwordFirstInput.classList.add(ERROR_CLASS)\n          if (PASSWORD_VALIDATE_FORMAT.test(this.passwordFirstInput.value)) {\n            this.passwordFirstInput.classList.remove(ERROR_CLASS)\n            this.passwordConfirmValidate()\n          }\n          this.passwordSecondInput.value !== this.passwordFirstInput.value\n            ? this.passwordSecondInput.classList.add(ERROR_CLASS)\n            : this.passwordSecondInput.classList.remove(ERROR_CLASS)\n        })\n      }\n\n      if (this.passwordSecondInput === undefined) {\n        this.passwordFirstInput.addEventListener(BLUR_EVENT, () => {\n          if (!PASSWORD_VALIDATE_FORMAT.test(this.passwordFirstInput.value)) {\n            this.passwordFirstInput.classList.add(ERROR_CLASS)\n            this.checkResult.password = false\n          }\n          if (PASSWORD_VALIDATE_FORMAT.test(this.passwordFirstInput.value)) {\n            this.passwordFirstInput.classList.remove(ERROR_CLASS)\n            this.checkResult.password = true\n          }\n        })\n      }\n    }\n  }\n\n  /**\n   * @desc 2つ目のパスワードを1つ目同様に検証し、1つ目と一致するか検証\n   */\n  passwordConfirmValidate() {\n    this.passwordSecondInput.addEventListener(BLUR_EVENT, () => {\n      if (!PASSWORD_VALIDATE_FORMAT.test(this.passwordSecondInput.value) || this.passwordSecondInput.value !== this.passwordFirstInput.value) {\n        this.passwordSecondInput.classList.add(ERROR_CLASS)\n        this.checkResult.password = false\n      }\n      if (PASSWORD_VALIDATE_FORMAT.test(this.passwordSecondInput.value) && this.passwordSecondInput.value === this.passwordFirstInput.value) {\n        this.passwordSecondInput.classList.remove(ERROR_CLASS)\n        this.checkResult.password = true\n      }\n    })\n  }\n\n  /**\n   * @desc 1つ目の電話番号をフォーマットを参照して検証\n   */\n  telValidate() {\n    if (document.querySelector(CHECK_TEL_CLASS) === null) this.checkResult.tel = true\n\n    if (document.querySelector(CHECK_TEL_CLASS) !== null) {\n      const targetArray = this.convertNode(CHECK_TEL_CLASS)\n      this.telFirstInput = targetArray[0]\n      this.telSecondInput = targetArray[1]\n\n      this.telFirstInput.addEventListener(BLUR_EVENT, () => {\n        if (!TEL_VALIDATE_FORMAT.test(this.telFirstInput.value)) this.telFirstInput.classList.add(ERROR_CLASS)\n        if (TEL_VALIDATE_FORMAT.test(this.telFirstInput.value)) {\n          this.telFirstInput.classList.remove(ERROR_CLASS)\n          this.telConfirmValidate()\n        }\n      })\n\n      // 初期値がある場合の処理\n      if (TEL_VALIDATE_FORMAT.test(this.telFirstInput.value)) this.checkResult.tel = true\n    }\n  }\n\n  /**\n   * @desc checkを通過したときにsubmitをactiveにする\n   */\n  activeSubmit() {\n    const targetSubmit = document.querySelector(SUBMIT_CLASS)\n\n    // アクティブ判定に必要なオブジェクトを作成（全てtrueだと活性化する）\n    this.checkResult = { 'empty': false, 'radio': false, 'checkbox': false, 'mail': false, 'password': false, 'tel': false, 'anyCheck': false }\n\n    // それぞれのチェック処理を走らせる\n    this.isValueEmpty()\n    this.isSelected()\n    this.isChecked()\n    this.anyChecked()\n    this.mailValidate()\n    this.passwordValidate()\n    this.telValidate()\n\n    if (this.checkResult.empty === true && this.checkResult.radio === true && this.checkResult.checkbox === true && this.checkResult.mail === true && this.checkResult.password === true && this.checkResult.anyCheck === true) targetSubmit.disabled = false\n\n    const checkObject = this.checkResult\n    Object.keys(checkObject).forEach(key => {\n      let oldValue = checkObject[key]\n      Object.defineProperty(checkObject, key, {\n        get: () => oldValue,\n        set: (newValue) => {\n          oldValue = newValue\n          checkObject.empty === true && checkObject.radio === true && checkObject.checkbox === true && checkObject.mail === true && checkObject.password === true && checkObject.anyCheck === true\n            ? targetSubmit.disabled = false\n            : targetSubmit.disabled = true\n        }\n      })\n    })\n  }\n}\n\nexport default ActivateSubmit\n"
  ]
}